#!/bin/sh
# shellcheck shell=dash

ARG="$1"	# e.g. ping, update, setupA, setupB or <empty>

arg_is() { case "$ARG" in "$1") true ;; *) false ;; esac; }
http_get() { local url="$1"; if command -v wget >/dev/null; then wget -4 -qO - "$url"; else curl -4 -s "$url"; fi; }
pubip_get() { http_get http://eth0.me || http_get http://ifconfig.me; }

WGPORT_SIDEA=12345
NOTUNNEL='10.63.0.0/16'

if arg_is 'ping'; then		# minutely cronjob on side-B
  case "$( date +%M )" in
    00|15|30|45)
      read -r IP4_SIDEA </etc/wireguard/side-A.ip4
      IP4_REAL="$( pubip_get )"
      test "$IP4_REAL" = "$IP4_SIDEA"			# if this fails the cronjob restarts the network
    ;;
    *) ping -c1 >/dev/null 2>/dev/null 192.168.10.1	# keep the contact by having traffic in tunnel
  esac
elif arg_is 'update'; then
  URL='https://raw.githubusercontent.com/bittorf/expose-vm-with-tunnel-to-internet-ipv4-ipv6/main/99-tunnel'
  http_get "$URL" >"$0"
elif arg_is 'setupA'; then
  cd /etc/wireguard && umask 077
  wg genkey > privatekey
  wg pubkey < privatekey > publickey

  echo "Please enter TCP ports (e.g. 80 443) which should be forwarded to side-B: "
  read -r PORTS_TCP_OLD 2>/dev/null   <ports_tcp.txt && echo "your settings: $PORTS_TCP_OLD (hit enter if OK)"
  read -r PORTS_TCP
  echo "${PORTS_TCP:-$PORTS_TCP_OLD}" >ports_tcp.txt

  echo "My public IP-address: $( pubip_get )"
  chmod 0600 ./*
  echo READY
elif arg_is 'setupB'; then
  cd /etc/wireguard && umask 077
  wg genkey > privatekey
  wg pubkey < privatekey > publickey

  echo "Please enter public IP-address of side-A: "
  read -r IP_OLD 2>/dev/null </etc/wireguard/side-A.pubip && echo "your settings: $IP_OLD (hit enter if OK)"
  read -r IP
  echo "${IP:+$OLD_IP}"      >/etc/wireguard/side-A.pubip

  for SSHPRIVKEY in ~/.ssh/*; do file -b "$SSHPRIVKEY" | grep 'private key' && break; done
  echo "Uploading SSH-publickey to root@$IP using SSH-identity '$SSHPRIVKEY' - please enter password"
  ssh-copy-id -i "$SSHPRIVKEY" "root@$IP" || exit 1

  echo "Uploading my wireguard-publickey to root@$IP:/etc/wireguard/side-B.pubkey"
  scp publickey "root@$IP:/etc/wireguard/side-B.pubkey"

  echo "Downloading wireguard-publickey from Side-A to /etc/wireguard/side-A.pubkey"
  scp "root@$IP:/etc/wireguard/publickey" /etc/wireguard/side-A.pubkey

  crontab -l | grep -q "$0 ping" || {
    echo >cron "* * * * * $0 ping || $0 network-restart-B"
    crontab cron
  }

  chmod 0600 ./*
  echo READY
elif arg_is 'network-restart-B'; then
  ip link set wg0 down
  ip link set wg0 up
  "$0"
elif read -r PUBKEY_OTHERSIDE 2>/dev/null </etc/wireguard/side-B.pubkey; then
  echo 'working on Side-A'

  while [ -z "$DEV" ]; do {
    # e.g.: default via 10.0.2.2 dev ens3 proto dhcp src 10.0.2.15 metric 100
    DEV="$( ip route list exact 0.0.0.0/0 | cut -d' ' -f5 )"	# e.g. ens3
  } done

  PUBIP6='2a00:5080:1:1c6::1'
  GW_IP6='2a00:5080:1:1c6::'		# autofallback to fe80::1

  ip link add wg0 type wireguard
  ip address add 192.168.10.1/24 dev wg0
  ip address add      fc00::1/64 dev wg0

  wg set wg0 private-key /etc/wireguard/privatekey
  wg set wg0 listen-port $WGPORT_SIDEA
  wg set wg0 peer "$PUBKEY_OTHERSIDE" allowed-ips 0.0.0.0/0,::/0
  ip link set wg0 up

  sysctl net.ipv4.ip_forward=1
  sysctl net.ipv4.conf.all.rp_filter=0
  iptables -t nat -I POSTROUTING -s 192.168.10.0/24 -j MASQUERADE

  ping -c1 "$GW_IP6" || GW_IP6='fe80::1'
  ip -6 address add $PUBIP6/64   dev "$DEV"
  ip -6 route   add 2000::/3 via $GW_IP6 dev "$DEV"
  sysctl net.ipv6.conf.all.forwarding=1
  ip6tables -t nat -I POSTROUTING -s fc00::/64 -j MASQUERADE

  read -r LIST_PORTS </etc/wireguard/ports_tcp.txt
  for PORT in $LIST_PORTS; do {
    iptables  -t nat -I PREROUTING -i "$DEV" -p tcp --dport "$PORT" -j DNAT --to-destination 192.168.10.2
    ip6tables -t nat -I PREROUTING -i "$DEV" -p tcp --dport "$PORT" -j DNAT --to-destination fc00::2
  } done
elif read -r PUBKEY_OTHERSIDE 2>/dev/null </etc/wireguard/side-A.pubkey; then
  echo 'working on Side-B'

  read -r IP4_SIDEA </etc/wireguard/side-A.ip4
  PUBIP4_OTHERSIDE="$IP4_SIDEA"
  PRIVIP4_OTHERSIDE="192.168.10.1"
  PRIVIP6_OTHERSIDE="fc00::1"

  for DEV in $( ip -oneline link | grep -v "LOOPBACK\|wg0:" | head -n1 | cut -d: -f2 ); do :; done
  ip -oneline link show dev "$DEV" | grep -q 'state UP' || dhclient "$DEV"

  ip link    add wg0 type wireguard
  ip address add 192.168.10.2/24 dev wg0
  ip address add      fc00::2/64 dev wg0

  wg set wg0 private-key /etc/wireguard/privatekey
  wg set wg0 peer "$PUBKEY_OTHERSIDE" allowed-ips 0.0.0.0/0,::/0 endpoint "${IP4_SIDEA}:${WGPORT_SIDEA}"
  ip link set wg0 up

  RETRY=4
  while [ -z "$GW_IP" ] && [ "$RETRY" -gt 0 ]; do {
    RETRY=$(( RETRY - 1 )) && sleep 5
    # e.g.: default via 10.0.2.2 dev ens3 proto dhcp src 10.0.2.15 metric 100
    GW_IP="$( ip route list exact 0.0.0.0/0 | cut -d' ' -f3 )"	# e.g. 10.0.2.2
    GWDEV="$( ip route list exact 0.0.0.0/0 | cut -d' ' -f5 )"	# e.g. ens3
  } done
  test "$RETRY" = 0 && exit

  # wait for tunnel
  while ! ping -c1 "$PRIVIP4_OTHERSIDE"; do sleep 1; done

  # these networks are directly attached or must be routed locally:
  for NET in $PUBIP4_OTHERSIDE/32 $NOTUNNEL; do {
    ip route add "$NET" via "$GW_IP" dev "$GWDEV"
  } done

  ip -4 route add   0.0.0.0/1 dev wg0
  ip -4 route add 128.0.0.0/1 dev wg0
  ip -6 route add 2000::/3 via $PRIVIP6_OTHERSIDE dev wg0
fi
